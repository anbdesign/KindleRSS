<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RSS Kindle Reader v2.3</title>
  <style>
    body {
      font-family: "Times New Roman", serif;
      font-size: 18px;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      background-color: #ffffff;
      color: #000000;
      max-width: 800px;
      margin: 0 auto;
    }
    
    h1, h2, h3 {
      color: #000000;
      margin-top: 30px;
      margin-bottom: 15px;
    }
    
    h1 {
      font-size: 24px;
      border-bottom: 2px solid #000000;
      padding-bottom: 10px;
    }
    
    h2 {
      font-size: 20px;
    }
    
    h3 {
      font-size: 18px;
    }
    
    a {
      color: #000000;
      text-decoration: underline;
      cursor: pointer;
    }
    
    a:hover {
      background-color: #f0f0f0;
    }
    
    .container {
      max-width: 100%;
      margin: 0 auto;
    }
    
    .nav {
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #ccc;
    }
    
    .nav a {
      margin-right: 20px;
      font-weight: bold;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    input[type="url"] {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border: 2px solid #000000;
      background-color: #ffffff;
      color: #000000;
    }
    
    button {
      background-color: #000000;
      color: #ffffff;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      cursor: pointer;
    }
    
    button:hover {
      background-color: #333333;
    }
    
    .error {
      color: #000000;
      background-color: #f0f0f0;
      padding: 20px;
      border: 2px solid #000000;
      margin: 20px 0;
    }
    
    .loading {
      text-align: center;
      font-style: italic;
      margin: 20px 0;
    }
    
    .article-list {
      list-style: none;
      padding: 0;
    }
    
    .article-item {
      margin-bottom: 20px;
      padding-bottom: 20px;
      border-bottom: 1px solid #ccc;
    }
    
    .article-title {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 10px;
    }
    
    .article-meta {
      font-size: 14px;
      color: #666;
      margin-bottom: 10px;
    }
    
    .article-summary {
      margin-bottom: 10px;
    }
    
    .article-content {
      line-height: 1.8;
      margin-bottom: 20px;
    }
    
    .article-content p {
      margin-bottom: 15px;
    }
    
    .article-content img {
      max-width: 100%;
      height: auto;
      display: block;
      margin: 20px 0;
    }
    
    .back-link {
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #ccc;
    }
    
    .article-tags, .article-categories {
      margin-top: 15px;
      padding: 10px;
      background-color: #f9f9f9;
      border-left: 3px solid #000;
      font-size: 16px;
    }
    
    .hidden {
      display: none;
    }
    
    /* Kindle-specific optimizations */
    @media (max-width: 600px) {
      body {
        font-size: 16px;
        padding: 10px;
      }
      
      h1 {
        font-size: 22px;
      }
      
      h2 {
        font-size: 18px;
      }
      
      .nav a {
        display: block;
        margin: 10px 0;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="nav">
      <a href="#" id="home-link">Home</a>
      <span id="breadcrumb"></span>
    </div>
    
    <div id="content">
      <!-- Home content -->
      <div id="home-content">
        <h1>RSS Kindle Reader v2.3</h1>

        <form id="feed-form">
          <div class="form-group">
            <label for="url">RSS Feed URL:</label>
            <input type="url" id="url" name="url" placeholder="https://example.com/feed.xml" required>
          </div>
          <button type="submit">Load Feed</button>
        </form>

        <h2>Popular RSS Feeds</h2>
        <ul id="popular-feeds">
          <li><a href="#" data-feed-url="https://feeds.bbci.co.uk/news/rss.xml">BBC News</a></li>
          <li><a href="#" data-feed-url="https://rss.cnn.com/rss/edition.rss">CNN</a></li>
          <li><a href="#" data-feed-url="https://feeds.reuters.com/Reuters/worldNews">Reuters World News</a></li>
          <li><a href="#" data-feed-url="https://feeds.feedburner.com/TechCrunch">TechCrunch</a></li>
          <li><a href="#" data-feed-url="https://feeds.arstechnica.com/arstechnica/index">Ars Technica</a></li>
          <li><a href="#" data-feed-url="https://daringfireball.net/feeds/main">Daring Fireball</a></li>
          <li><a href="#" data-feed-url="https://www.raptitude.com/feed/">Raptitude</a></li>
          <li><a href="#" data-feed-url="https://morss.it/https://www.raptitude.com/feed/">Raptitude (MORSS)</a></li>
          <li><a href="#" data-feed-url="https://www.theverge.com/rss/partner/subscriber-only-full-feed/rss.xml">The Verge (Articles)</a></li>
          <li><a href="#" data-feed-url="https://www.theverge.com/rss/quickposts">The Verge (Quick Posts)</a></li>
          <li><a href="#" data-feed-url="https://arun.is/rss.xml">Arun.is</a></li>
          <li><a href="#" data-feed-url="https://stephango.com/feed.xml">Stephango</a></li>
          <li><a href="#" data-feed-url="https://feeds.kottke.org/main">Kottke.org</a></li>
          <li><a href="#" data-feed-url="https://wp.theringer.com/feed/">The Ringer</a></li>
          <li><a href="#" data-feed-url="https://www.techmeme.com/feed.xml">Techmeme</a></li>
          <li><a href="#" data-feed-url="https://feeds.feedblitz.com/sethsblog">Seth's Blog</a></li>
          <li><a href="#" data-feed-url="https://morss.it/https://news.ycombinator.com/rss">Hacker News</a></li>
        </ul>
      </div>
      
      <!-- Feed content -->
      <div id="feed-content" class="hidden">
        <div id="feed-info"></div>
        <div id="feed-articles"></div>
      </div>
      
      <!-- Article content -->
      <div id="article-content" class="hidden">
        <div id="article-content-container"></div>
      </div>
      
      <!-- Loading indicator -->
      <div id="loading" class="loading hidden">Loading...</div>
      
      <!-- Error display -->
      <div id="error" class="error hidden"></div>
    </div>
  </div>

  <script>
    let currentFeed = null;
    
    // Initialize event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Home link
      document.getElementById('home-link').addEventListener('click', function(e) {
        e.preventDefault();
        showHome();
      });
      
      // Feed form
      document.getElementById('feed-form').addEventListener('submit', function(e) {
        e.preventDefault();
        loadFeed();
      });
      
      // Popular feeds
      document.getElementById('popular-feeds').addEventListener('click', function(e) {
        if (e.target.tagName === 'A' && e.target.dataset.feedUrl) {
          e.preventDefault();
          loadFeedByUrl(e.target.dataset.feedUrl);
        }
      });
    });
    
    function showContent(contentId) {
      // Hide all content sections
      document.getElementById('home-content').classList.add('hidden');
      document.getElementById('feed-content').classList.add('hidden');
      document.getElementById('article-content').classList.add('hidden');
      document.getElementById('loading').classList.add('hidden');
      document.getElementById('error').classList.add('hidden');
      
      // Show the requested content
      document.getElementById(contentId).classList.remove('hidden');
    }
    
    function showLoading() {
      showContent('loading');
    }
    
    function showError(message) {
      document.getElementById('error').innerHTML = message;
      showContent('error');
    }
    
    function showHome() {
      showContent('home-content');
      document.getElementById('breadcrumb').innerHTML = '';
      currentFeed = null;
    }
    
    function loadFeed() {
      const url = document.getElementById('url').value;
      if (url) {
        loadFeedByUrl(url);
      }
    }
    
    function loadFeedByUrl(feedUrl) {
      showLoading();
      
      // Construct absolute URL using current protocol and host to ensure HTTP
      const baseUrl = window.location.protocol + '//' + window.location.host;
      const apiUrl = baseUrl + '/feed?url=' + encodeURIComponent(feedUrl);
      console.log('DEBUG: Attempting to fetch HTML from:', apiUrl);
      console.log('DEBUG: Current location:', window.location.href);
      console.log('DEBUG: Protocol:', window.location.protocol);
      console.log('DEBUG: Base URL:', baseUrl);
      
      fetch(apiUrl)
        .then(response => {
          // DEBUG: Log response details
          console.log('DEBUG: Response status:', response.status);
          console.log('DEBUG: Response ok:', response.ok);
          console.log('DEBUG: Response headers:', response.headers);
          
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text(); // Get HTML instead of JSON
        })
        .then(html => {
          console.log('DEBUG: Received HTML length:', html.length);
          displayFeedHtml(html, feedUrl);
        })
        .catch(error => {
          // DEBUG: Enhanced error logging
          console.error('DEBUG: Fetch error details:', error);
          console.error('DEBUG: Error name:', error.name);
          console.error('DEBUG: Error message:', error.message);
          console.error('DEBUG: Error stack:', error.stack);
          showError('Failed to load feed. Please check your connection and try again. Error: ' + error.message);
        });
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    
    function displayFeedHtml(html, feedUrl) {
      // Parse the HTML to extract the main content
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Extract the main content area
      const mainContent = doc.querySelector('main') || doc.querySelector('.container') || doc.body;
      
      // Extract breadcrumb if present
      const breadcrumbElement = doc.querySelector('#breadcrumb');
      if (breadcrumbElement) {
        document.getElementById('breadcrumb').innerHTML = breadcrumbElement.innerHTML;
      }
      
      // Extract feed info and articles
      const feedInfo = mainContent.querySelector('.feed-info') || mainContent.querySelector('h1').parentElement;
      const articlesList = mainContent.querySelector('.articles') || mainContent.querySelector('ul');
      
      if (feedInfo) {
        document.getElementById('feed-info').innerHTML = feedInfo.innerHTML;
      }
      
      if (articlesList) {
        document.getElementById('feed-articles').innerHTML = articlesList.outerHTML;
        
        // Add event listeners to article links in the new content
        const articleLinks = document.querySelectorAll('#feed-articles a[href*="/article/"]');
        articleLinks.forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const href = this.getAttribute('href');
            const match = href.match(/\/article\/([^\/]+)\/(\d+)/);
            if (match) {
              const encodedFeedUrl = match[1];
              const articleIndex = parseInt(match[2]);
              loadArticleHtml(decodeURIComponent(encodedFeedUrl), articleIndex);
            }
          });
        });
      } else {
        // Fallback: use the entire main content
        document.getElementById('feed-info').innerHTML = '';
        document.getElementById('feed-articles').innerHTML = mainContent.innerHTML;
        
        // Add event listeners to any article links
        const articleLinks = document.querySelectorAll('#feed-articles a[href*="/article/"]');
        articleLinks.forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const href = this.getAttribute('href');
            const match = href.match(/\/article\/([^\/]+)\/(\d+)/);
            if (match) {
              const encodedFeedUrl = match[1];
              const articleIndex = parseInt(match[2]);
              loadArticleHtml(decodeURIComponent(encodedFeedUrl), articleIndex);
            }
          });
        });
      }
      
      // Store the current feed URL for navigation
      currentFeed = { feedUrl: feedUrl };
      
      showContent('feed-content');
    }
    
    function displayFeed(feed) {
      document.getElementById('breadcrumb').innerHTML = ' > ' + escapeHtml(feed.title);
      
      let feedInfoHtml = '<h1>' + escapeHtml(feed.title) + '</h1>';
      
      if (feed.description) {
        feedInfoHtml += '<p>' + escapeHtml(feed.description) + '</p>';
      }
      
      if (feed.link) {
        feedInfoHtml += '<p><strong>Website:</strong> <a href="' + escapeHtml(feed.link) + '" target="_blank">' + escapeHtml(feed.link) + '</a></p>';
      }
      
      document.getElementById('feed-info').innerHTML = feedInfoHtml;
      
      let articlesHtml = '<h2>Articles (' + feed.items.length + ')</h2>';
      articlesHtml += '<ul class="article-list" id="article-list">';
      
      feed.items.forEach((item, index) => {
        articlesHtml += '<li class="article-item">';
        articlesHtml += '<div class="article-title">';
        articlesHtml += '<a href="#" data-feed-url="' + escapeHtml(feed.feedUrl) + '" data-article-index="' + index + '">' + escapeHtml(item.title) + '</a>';
        articlesHtml += '</div>';
        
        articlesHtml += '<div class="article-meta">';
        if (item.pubDate) {
          articlesHtml += 'Published: ' + new Date(item.pubDate).toLocaleDateString();
        }
        if (item.creator) {
          articlesHtml += ' | By: ' + escapeHtml(item.creator);
        }
        articlesHtml += '</div>';
        
        if (item.contentSnippet) {
          let snippet = item.contentSnippet.substring(0, 200);
          if (item.contentSnippet.length > 200) {
            snippet += '...';
          }
          articlesHtml += '<div class="article-summary">' + escapeHtml(snippet) + '</div>';
        }
        
        articlesHtml += '</li>';
      });
      
      articlesHtml += '</ul>';
      document.getElementById('feed-articles').innerHTML = articlesHtml;
      
      // Add event listeners to article links
      document.getElementById('article-list').addEventListener('click', function(e) {
        if (e.target.tagName === 'A' && e.target.dataset.feedUrl && e.target.dataset.articleIndex) {
          e.preventDefault();
          loadArticleHtml(e.target.dataset.feedUrl, parseInt(e.target.dataset.articleIndex));
        }
      });
      
      showContent('feed-content');
    }
    
    function loadArticleHtml(feedUrl, index) {
      console.log('Loading article HTML - feedUrl:', feedUrl, 'index:', index);
      showLoading();
      
      const encodedUrl = encodeURIComponent(feedUrl);
      const baseUrl = window.location.protocol + '//' + window.location.host;
      const apiUrl = baseUrl + '/article/' + encodedUrl + '/' + index;
      
      console.log('DEBUG: Article HTML URL:', apiUrl);
      console.log('DEBUG: Current location:', window.location.href);
      console.log('DEBUG: Protocol:', window.location.protocol);
      console.log('DEBUG: Base URL:', baseUrl);
      
      fetch(apiUrl)
        .then(response => {
          console.log('DEBUG: Article response status:', response.status);
          console.log('DEBUG: Article response ok:', response.ok);
          
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text(); // Get HTML instead of JSON
        })
        .then(html => {
          console.log('DEBUG: Article HTML length:', html.length);
          displayArticleHtml(html, feedUrl);
        })
        .catch(error => {
          console.error('DEBUG: Article fetch error:', error);
          showError('Failed to load article. Please check your connection and try again. Error: ' + error.message);
        });
    }
    
    function loadArticle(feedUrl, index) {
      console.log('Loading article - feedUrl:', feedUrl, 'index:', index);
      showLoading();
      
      const encodedUrl = encodeURIComponent(feedUrl);
      const apiUrl = '/api/article/' + encodedUrl + '/' + index;
      
      // DEBUG: Enhanced logging for article loading
      console.log('DEBUG: Article API URL:', apiUrl);
      console.log('DEBUG: Current location:', window.location.href);
      console.log('DEBUG: Protocol:', window.location.protocol);
      
      fetch(apiUrl)
        .then(response => {
          // DEBUG: Log response details
          console.log('DEBUG: Article response status:', response.status);
          console.log('DEBUG: Article response ok:', response.ok);
          
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log('DEBUG: Article data received:', data);
          if (data.error) {
            showError(data.error);
            return;
          }
          
          displayArticle(data);
        })
        .catch(error => {
          // DEBUG: Enhanced error logging
          console.error('DEBUG: Article fetch error:', error);
          console.error('DEBUG: Error type:', typeof error);
          console.error('DEBUG: Error properties:', Object.keys(error));
          showError('Failed to load article. Please check your connection and try again. Error: ' + error.message);
        });
    }
    
    function displayArticleHtml(html, feedUrl) {
      // Parse the HTML to extract the main content
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Extract the main content area
      const mainContent = doc.querySelector('main') || doc.querySelector('.container') || doc.body;
      
      // Extract breadcrumb if present
      const breadcrumbElement = doc.querySelector('#breadcrumb');
      if (breadcrumbElement) {
        document.getElementById('breadcrumb').innerHTML = breadcrumbElement.innerHTML;
        
        // Add event listener to the "back to feed" link if it exists
        const backToFeedLink = document.querySelector('#back-to-feed-link');
        if (backToFeedLink) {
          backToFeedLink.addEventListener('click', function(e) {
            e.preventDefault();
            if (currentFeed) {
              loadFeedByUrl(currentFeed.feedUrl);
            }
          });
        }
      }
      
      // Extract article content
      const articleContent = mainContent.querySelector('.article') || mainContent;
      
      if (articleContent) {
        document.getElementById('article-content-container').innerHTML = articleContent.innerHTML;
      } else {
        // Fallback: use the entire main content
        document.getElementById('article-content-container').innerHTML = mainContent.innerHTML;
      }
      
      showContent('article-content');
    }
    
    function displayArticle(data) {
      const article = data.article;
      const feedTitle = data.feedTitle;
      
      document.getElementById('breadcrumb').innerHTML = ' > <a href="#" id="back-to-feed-link">' + escapeHtml(feedTitle) + '</a> > ' + escapeHtml(article.title);
      
      let articleHtml = '<h1>' + escapeHtml(article.title) + '</h1>';
      
      articleHtml += '<div class="article-meta">';
      if (article.pubDate) {
        articleHtml += '<strong>Published:</strong> ' + new Date(article.pubDate).toLocaleDateString();
      }
      if (article.creator) {
        articleHtml += ' | <strong>By:</strong> ' + escapeHtml(article.creator);
      }
      if (article.link) {
        articleHtml += ' | <strong>Original:</strong> <a href="' + escapeHtml(article.link) + '" target="_blank">View Original</a>';
      }
      articleHtml += '</div>';
      
      articleHtml += '<div class="article-content">';
      if (article.content) {
        articleHtml += article.content;
      } else if (article['content:encoded']) {
        articleHtml += article['content:encoded'];
      } else if (article.contentSnippet) {
        articleHtml += '<p>' + escapeHtml(article.contentSnippet) + '</p>';
      } else if (article.description) {
        articleHtml += '<p>' + escapeHtml(article.description) + '</p>';
      } else {
        articleHtml += '<p>No content available for this article.</p>';
      }
      articleHtml += '</div>';
      
      if (article['media:keywords']) {
        articleHtml += '<div class="article-tags"><strong>Keywords:</strong> ' + escapeHtml(article['media:keywords']) + '</div>';
      }
      
      if (article.categories && article.categories.length > 0) {
        articleHtml += '<div class="article-categories"><strong>Categories:</strong> ' + escapeHtml(article.categories.join(', ')) + '</div>';
      }
      
      articleHtml += '<div class="back-link">';
      articleHtml += '<a href="#" id="back-to-feed-bottom">&larr; Back to ' + escapeHtml(feedTitle) + '</a>';
      articleHtml += '</div>';
      
      document.getElementById('article-content-container').innerHTML = articleHtml;
      
      // Add event listeners for back links
      document.getElementById('back-to-feed-link').addEventListener('click', function(e) {
        e.preventDefault();
        backToFeed();
      });
      
      document.getElementById('back-to-feed-bottom').addEventListener('click', function(e) {
        e.preventDefault();
        backToFeed();
      });
      
      showContent('article-content');
    }
    
    function backToFeed() {
      if (currentFeed) {
        loadFeedByUrl(currentFeed.feedUrl);
      } else {
        showHome();
      }
    }
  </script>
</body>
</html>
